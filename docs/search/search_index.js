var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Overview","text":"<p>Nestipy is a Python framework inspired by NestJS and built on top of FastAPI or Litestar. It adheres to NestJS's modular architecture, offering a structured approach to developing APIs that's intuitive and enjoyable. With Nestipy, developers can create scalable and maintainable APIs effortlessly. The framework embraces key features like dependency injection, type annotations, decorators, and code generation, facilitating the creation of clean and testable codebases. While not a direct translation of NestJS to Python, Nestipy is tailored specifically for Python developers, including data scientists, analysts, and engineers. Its goal is to empower them in crafting robust and efficient APIs for their data-centric applications. Notably, Nestipy extends its functionality to support GraphQL through integration with Strawberry. This allows developers to harness the power and flexibility of GraphQL within the Nestipy framework.</p>"},{"location":"index.html#dynamic-module","title":"Dynamic module","text":"<p>Nestipy introduces a dynamic module feature inspired by NestJS, allowing for the creation of modules with dynamic access to the Inversion of Control (IOC) container. This functionality mirrors NestJS's dynamic module behavior, enabling seamless interaction with dependencies registered in the IOC container. By leveraging this feature, developers can build highly adaptable architectures within Nestipy applications, fostering modularity and efficient resource management across the application. This empowers developers to craft scalable and maintainable solutions, aligning with the intuitive and powerful approach of NestJS dynamic modules.</p>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"index.html#credits","title":"Credits","text":"<p>NestJS, a framework for building Node.js applications.</p> <p>Litestar, a framework for effortlessly build performant APIs.</p> <p>FastAPI, a framework for building Python applications.</p> <p>Strawberry, a developer friendly GraphQL library for Python, designed for modern development.</p>"},{"location":"dynamic.html","title":"Create dynamic module","text":""},{"location":"dynamic.html#nice-to-know","title":"Nice to know","text":"<ol> <li>[x] A dynamic module must be decorated with <code>@Module()</code> and must extends <code>DynamicModule</code></li> <li>[x] Inside Dynamic module, we can access ioc container by <code>self.get_container()</code> and this container , inside property <code>instances</code> we can access to any instance of ModuleProvider or Service that we have declared in any Module.</li> <li>[x] <code>on_startup</code>, and <code>on_shutdown</code> hooks are available in any Module(Dynamic or Not)</li> <li>[x] We can define a provider by using <code>ModuleProvider</code> instance instead of create a service in Module.</li> <li>[x] All provider declared in <code>AppModule</code> are declared as Global Provider</li> <li>[x] Module is is compiled by its priority order of declaration in imports</li> </ol>"},{"location":"gateway.html","title":"SocketIo Gateway","text":""},{"location":"gateway.html#using-socketio-gateway","title":"Using socketIO Gateway","text":"<ol> <li>[x] First create gateway provider  <code>nestipy g provider EventGateway</code> <code>event_gateway.py</code> <pre><code>from nestipy.common import Gateway, GATEWAY_SERVER, SubscribeMessage\nfrom socketio import AsyncServer\n\n@Gateway()\nclass EventGateway:\n    server: AsyncServer = Inject(GATEWAY_SERVER)\n\n    SubscribeMessage('message')\n    def on_message(self, sid, data):\n        print(sid, data)\n        self.server.emit('message', data, sid)\n</code></pre></li> <li>[x] Register EventGateway in app_module providers</li> <li>[x] Modify <code>main.py</code> by adding:  <pre><code>import socketio \n...\nsio = socketio.AsyncServer(async_mode='asgi')\napp.useSocketIo(sio)\n...\n</code></pre> 4.[x] Everything will be ok </li> <li>[x] When socketIo in register in main, GATEWAY_SERVER provider will be available every where by injecting it.</li> </ol>"},{"location":"plugin.html","title":"Available dynamic module","text":""},{"location":"plugin.html#list-of-available-modules","title":"List of available modules","text":""},{"location":"plugin.html#strawberry-module","title":"Strawberry module","text":"<p>Usage: register Strawberry module in <code>app_module.py</code> to use it  <code>app_module.py</code></p> <pre><code>...\nfrom nestipy.plugins.strawberry_module.strawberry_module import StrawberryModule, StrawberryOption\n\n...\n\n\n@Module(\n    imports=[\n        ...\n        StrawberryModule.for_root(\n            resolvers=[UserModule],\n            option=StrawberryOption(graphql_ide='graphiql')\n        ),\n        ...\n    ],\n)\nclass AppModule:\n    pass\n</code></pre> <p>In resolvers import all modules that you have defined your resolvers.</p>"},{"location":"plugin.html#config-module","title":"Config module","text":"<p>Usage: register Config module in <code>app_module.py</code> to use it  <code>app_module.py</code></p> <p><pre><code>...\nfrom nestipy.plugins.config_module.config_module import ConfigModule\n...\n\n\n@Module(\n    imports=[\n        ...\n        ConfigModule.for_root(),\n        ...\n    ],\n\n)\nclass AppModule(NestipyModule):\n   pass\n</code></pre> <code>ConfigModule.for_root()</code> can receive a parameter of .env file</p> <p><code>ConfigModule</code> is a global module, so <code>ConfigService</code> can be injected in any Controller, Resolver, or Service. You can use method <code>get('key')</code> of <code>ConfigService</code> to get value by key from your <code>.env</code> file.</p>"},{"location":"plugin.html#peewee-module","title":"Peewee module","text":"<p>Usage: register Peewee module in <code>app_module.py</code> to use it  </p> <p><code>app_module.py</code></p> <p><pre><code>...\nfrom nestipy.plugins.peewee_module.peewee_module import PeeweeModule,PeeweeDatabaseConfig\nfrom nestipy.plugins.config_module.config_module import ConfigModule, ConfigService\n...\n\n\nasync def peewee_mysql_factory(config: ConfigService) -&gt; PeeweeDatabaseConfig:\n    return PeeweeDatabaseConfig(\n        driver='mysql',\n        database=config.get(\"DB_DATABASE\"),\n        host=config.get(\"DB_HOST\"),\n        port=int(f'{config.get(\"DB_PORT\")}'),\n        user=config.get(\"DB_USER\"),\n        password=config.get(\"DB_PASSWORD\") or ''\n    )\n\n@Module(\n    imports=[\n        ...\n        ConfigModule.for_root(),\n         PeeweeModule.for_root_async(\n            use_factory=peewee_mysql_factory,\n            inject=[ConfigService]\n        ),\n        ...\n    ],\n\n)\nclass AppModule(NestipyModule):\n   pass\n</code></pre> In this example, we show the dependency between module. So , in this case, <code>ConfigModule</code> must be registered in top of <code>PeeweeModule</code>.  <code>ConfigService</code> is a provider exported by <code>ConfigModule</code></p> <p>To register a model in peewee, model must decorate with <code>@Model</code> from <code>peewee_module</code> and must be register by calling <code>PeeweeModule.for_feature([MyModel])</code> in imports of Module. </p>"},{"location":"plugin.html#masonite-orm-module","title":"Masonite orm module","text":"<p>Usage: register Masonite orm module in <code>app_module.py</code> to use it  </p> <p><code>app_module.py</code></p> <pre><code>...\nfrom nestipy.plugins.masonite_orm_module.masonite_orm_module import MasoniteOrmModule, MasoniteDatabaseConfig\n...\nasync def masonite_factory(config: ConfigService):\n    await asyncio.sleep(0.4)\n    return {\n        'default': 'mysql',\n        'mysql': MasoniteDatabaseConfig(\n            driver='mysql',\n            host=config.get(\"DB_HOST\"),\n            port=config.get(\"DB_PORT\"),\n            user=config.get(\"DB_USER\"),\n            password=config.get(\"DB_PASSWORD\") or '',\n            database=config.get(\"DB_DATABASE\")\n        )\n    }\n@Module(\n    imports=[\n        ...,\n        ConfigModule.for_root(),\n        MasoniteOrmModule.for_root_async(\n            factory=masonite_factory,\n            inject=[ConfigService]\n        ),\n        ...\n    ]\n)\nclass AppModule:\n    pass\n</code></pre>"},{"location":"plugin.html#beanie-mongo-module","title":"Beanie mongo module","text":"<p>Usage: register Beanie mongo module in <code>app_module.py</code> to use it  </p> <p><code>app_module.py</code></p> <p><pre><code>..\nfrom nestipy.plugins.beanie_module.beanie_module import BeanieModule\n...\n\nasync def beanie_factory(config: ConfigService):\n    return config.get('MONGODB_URL')\n\n\n@Module(\n    imports=[\n        ...,\n        ConfigModule.for_root(),\n        BeanieModule.for_root_async(\n            use_factory=beanie_factory,\n            inject=[ConfigService],\n            documents= [\n                #Register document here or use BeanieModule.for_feature([MyDocument])\n            ]\n        ),\n        ...\n    ]\n)\nclass AppModule:\n    pass\n</code></pre> You must call <code>BeanieModule.for_feature([MyDocument])</code> inside module imports to register a document.</p>"},{"location":"start.html","title":"Get started with Nestipy","text":""},{"location":"start.html#introduction","title":"Introduction","text":"<p>This documentation introduces a creation of the simplest Nestipy Application.</p>"},{"location":"start.html#requirements","title":"Requirements","text":"<ul> <li>Python 3.10+</li> <li>Nestipy (latest version)</li> </ul>"},{"location":"start.html#example","title":"Example","text":""},{"location":"start.html#github","title":"Github","text":"<p>Navigate on Nestipy example</p>"},{"location":"start.html#setting-up","title":"Setting Up","text":""},{"location":"start.html#installation-and-setup","title":"Installation and Setup","text":"<p>All you need to getting started is to install only nestipy, you can achieve this by running the following command using pip</p> <pre><code>pip install nestipy\n</code></pre>"},{"location":"start.html#start-with-cli","title":"Start with cli","text":""},{"location":"start.html#create-a-new-project","title":"Create a new project","text":"<pre><code>nestipy new my_app\n</code></pre> <p>This command will create a new project with the following structure:</p> <pre><code>\u251c\u2500\u2500 app_module.py\n\u251c\u2500\u2500 app_controller.py\n\u251c\u2500\u2500 app_service.py\n\u251c\u2500\u2500 main.py\n|\u2500\u2500 requirements.txt\n|\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502    \u251c\u2500\u2500 __init__.py\n</code></pre> <p>After creating the project, to start serve, run the following command inside the project directory:</p> <p><pre><code>python main.py\n</code></pre> Now you can access the application at http://localhost:8000/schema/swagger for Litestar, http://localhost:8000/docs for Fastapi and test the endpoints.</p> <p>Let's go over the boilerplate code that generated by the cli:</p> <p><code>app_module.py</code></p> <pre><code>from nestipy.common.decorator import Module\nfrom .app_controller import AppController\nfrom .app_service import AppService\n\n\n@Module(\n    controllers=[AppController],\n    providers=[AppService]\n)\nclass AppModule:\n    pass\n</code></pre> <p><code>app_controller.py</code></p> <pre><code>from nestipy.common.decorator import Controller, Get, Inject, Post, Put, Delete\nfrom .app_service import AppService\n\n\n@Controller()\nclass AppController:\n    service: AppService = Inject(AppService)\n\n    @Get()\n    async def get(self) -&gt; str:\n        return await self.service.get()\n\n    @Post()\n    async def post(self, data: str) -&gt; str:\n        return await self.service.post(data=data)\n\n    @Put('/{user_id}')\n    async def put(self, user_id: int, data: str) -&gt; str:\n        return await self.service.put(id_=user_id, data=data)\n\n    @Delete('/{user_id}')\n    async def delete(self, user_id: int) -&gt; None:\n        await self.service.delete(id_=user_id)\n</code></pre> <p><code>app_service.py</code></p> <pre><code>from nestipy.common.decorator import Injectable\n\n\n@Injectable()\nclass AppService:\n\n    @classmethod\n    async def get(cls):\n        return \"test\"\n\n    @classmethod\n    async def post(cls, data: str):\n        return \"test\"\n\n    @classmethod\n    async def put(cls, id_: int, data: str):\n        return \"test\"\n\n    @classmethod\n    async def delete(cls, id_: int):\n        return \"test\"\n</code></pre> <p><code>main.py</code></p> <pre><code>import uvicorn\n\nfrom .app_module import AppModule\nfrom nestipy.core.factory import NestipyFactory\n# from nestipy.core.platform import PlatformFastAPI\n\nfrom nestipy.core.platform import PlatformLitestar\n\n# app = NestipyFactory[PlatformFastAPI].create(AppModule, title=\"My FastAPI App\")\napp = NestipyFactory[PlatformLitestar].create(AppModule, title=\"My App\")\n\nif __name__ == '__main__':\n    uvicorn.run('main:app', host=\"0.0.0.0\", port=8000, reload=True)\n</code></pre>"},{"location":"start.html#creating-new-resource","title":"Creating new resource","text":"<p>After creating the project, let's create a new resource:</p> <pre><code>pynest g resource user\n-&gt; api\n-&gt; graphql\n</code></pre> <p>By choosing api, we have generated new folder inside src</p> <pre><code>\u251c\u2500\u2500 user\n\u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u251c\u2500\u2500 user_controller.py\n\u2502    \u251c\u2500\u2500 user_service.py\n\u2502    \u251c\u2500\u2500 user_dto.py\n\u2502    \u251c\u2500\u2500 user_module.py\n</code></pre> <p>By choosing graphql, we have resolver instead of controller, like the following</p> <pre><code>\u251c\u2500\u2500 user\n\u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u251c\u2500\u2500 user_resolver.py\n\u2502    \u251c\u2500\u2500 user_service.py\n\u2502    \u251c\u2500\u2500 user_input.py\n\u2502    \u251c\u2500\u2500 user_module.py\n</code></pre> <p>By using graphql, dont forget to register strawberry module from nestipy plugin inside app_module imports.</p> <pre><code>...\nfrom nestipy.plugins.strawberry_module.strawberry_module import StrawberryModule, StrawberryOption\n\n...\n\n\n@Module(\n    imports=[\n        ...\n        StrawberryModule.for_root(\n            resolvers=[UserModule],\n            option=StrawberryOption(graphql_ide='graphiql')\n        ),\n        ...\n    ],\n)\nclass AppModule:\n    pass\n</code></pre>"},{"location":"start.html#creating-new-module","title":"Creating new module","text":"<p>With nestipy we can create a module by running the following command</p> <pre><code>nestipy g module example\n</code></pre> <p>This command will create a new directory example inside src and update app_module imports to import this new module.</p> <pre><code>\u251c\u2500\u2500 example\n\u2502    \u251c\u2500\u2500 __init__.py\n\u2502    \u251c\u2500\u2500 example_module.py\n</code></pre> <p>So inside, we got,</p> <p><code>example_module.py</code></p> <pre><code>from nestipy.common.decorator import Module\nfrom nestipy.common.decorator import Module\n\n\n@Module()\nclass ExampleModule:\n    pass\n</code></pre>"},{"location":"start.html#creating-new-controller","title":"Creating new controller","text":"<p>Create a controller to handle the requests and responses.</p> <pre><code>nestipy g controller example\n</code></pre> <p><code>examples_controller.py</code></p> <pre><code>from nestipy.common.decorator import Controller, Get\n\n\n@Controller('examples')\nclass ExampleController:\n\n    @Get()\n    async def get(self) -&gt; str:\n        return \"test\"\n</code></pre>"},{"location":"start.html#creating-new-resolver","title":"Creating new resolver","text":"<p>Or for graphql , create a resolver.</p> <pre><code>nestipy g resolver example\n</code></pre> <p><code>examples_resolver.py</code></p> <pre><code>from strawberry.types import Info\nfrom nestipy.plugins.strawberry_module.decorator import Resolver, Query, Mutation\n\n\n@Resolver()\nclass ExampleResolver:\n\n    @Query()\n    def example_test_query(self, root: Info) -&gt; str:\n        return \"test\"\n\n    @Mutation()\n    def example_test_mutation(self, root: Info, test: str) -&gt; str:\n        return test\n</code></pre>"},{"location":"start.html#creating-new-service","title":"Creating new service","text":"<p>Implement services to handle business logic.</p> <pre><code>nestipy g service example\n</code></pre> <p><code>examples_service.py</code></p> <pre><code>from nestipy.common.decorator import Injectable\n\n\n@Injectable()\nclass ExampleService:\n\n    async def test(self):\n        pass\n</code></pre> <p>Service is injectable inside a controller, resolver or other service by using Inject to inject it as a property of them. </p> <pre><code>service: ExampleService = Inject(ExampleService)\n</code></pre>"}]}